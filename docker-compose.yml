version: "3.7"
services:
  redis:
    image: redis:alpine
    command: redis-server
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - laudspeaker_default

  postgres:
    image: postgres:14.4-alpine
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: laudspeaker
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - laudspeaker_default

  mongo:
    image: "mongo:latest"
    hostname: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    command: "--bind_ip_all --replSet rs0"
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "admin",
          "--port",
          "27017",
          "--eval",
          "db.adminCommand('ping').ok",
        ]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      - laudspeaker_default

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    restart: on-failure
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - laudspeaker_default

  #### START kafka related containers
  zoo1:
    image: bitnami/zookeeper:latest
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOO_SERVERS: zoo1:2888:3888
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - laudspeaker_default

  kafka1:
    image: bitnami/kafka:3.6.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "29092:29092"
      - "9092:9092"
    healthcheck:
      test: kafka-cluster.sh cluster-id --bootstrap-server kafka1:19092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
    environment:
      KAFKA_CFG_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://kafka1:29092,DEV://kafka1:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://host.docker.internal:29092,DEV://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DEV:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_PROTOCOL: PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_TLS_CLIENT_AUTH: none
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zoo1
    networks:
      - laudspeaker_default

  # kafka-gui:
  #   image: provectuslabs/kafka-ui
  #   hostname: kafka-gui
  #   container_name: kafak-gui
  #   environment:
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092
  #     KAFKA_CLUSTERS_0_NAME: local
  #   ports:
  #     - "1002:8080"
  #   depends_on:
  #     - kafka1
  #   networks:
  #     - laudspeaker_default
  #### END kafka related containers

  #### START kafka connect related containers
  kafka-connect1:
    image: bitnami/kafka:latest
    hostname: kafka-connect1
    container_name: kafka-connect1
    healthcheck:
      test: ["CMD", "curl", "localhost:8083"]
      interval: 5s
      timeout: 2s
      retries: 20
    ports:
      - "8083:8083"
    volumes:
      - ./local-env/kafkaconnect:/opt/bitnami/kafka-connect
    depends_on:
      kafka1:
        condition: service_healthy
    networks:
      - laudspeaker_default
    command:
      - bash
      - -c
      - /opt/bitnami/kafka/bin/connect-distributed.sh /opt/bitnami/kafka-connect/connect.properties
  #### END kafka connect related containers

  init-environment:
    build:
      context: ./local-env/
      dockerfile: Dockerfile.initenv
    container_name: init-environment
    depends_on:
      mongo:
        condition: service_healthy
      kafka1:
        condition: service_started
      kafka-connect1:
        condition: service_healthy
    networks:
      - laudspeaker_default

  ping-server:
    image: jaredhanson11/ping-server:latest
    container_name: ping-server
    ports:
      - "8555:8555"
    environment:
      PORT: 8555
    networks:
      - laudspeaker_default

  laudspeaker:
    profiles:
      - "testing"
    image: ${LAUDSPEAKER_IMAGE:-laudspeaker/laudspeaker:latest}
    container_name: laudspeaker
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "localhost:8080"]
      interval: 5s
      timeout: 30s
      retries: 20
    depends_on:
      init-environment:
        condition: service_completed_successfully
    volumes:
      - ./local-env/1a_init_kafka_engine.sql:/app/packages/server/src/migrations/clickhouse/1_init.sql
    env_file:
      - ./local-env/env-docker-compose
    networks:
      - laudspeaker_default

networks:
  laudspeaker_default:
    driver: bridge
    name: laudspeaker_default
